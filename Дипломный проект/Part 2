import os
import jsonpickle

class FileProvider:
    def get(self, path):
        file = open(path, 'r')
        data = file.read()
        file.close()
        return data

    def writelines(self, path, data):
        file = open(path, 'w')
        data = file.writelines(data)
        file.close()        
        
    def exist(self, path):
        return os.path.exists(path)

class School():
    def __init__(self, name, address, count_students=0):
        self.name = name
        self.address = address
        self.count_students = count_students

class SchoolStorage():
    def __init__(self):
        self.file_name = 'school.json'

    def safe(self, school):
        json_data = jsonpickle.encode(school)
        file_provider.writelines(self.file_name, json_data)

    def get_all(self):
        if not file_provider.exist(self.file_name):
            print('Здравствуйте! Введите информацию о школе:')
            print('Введите название школы:')
            school_name = get_general_input.get_input_text()
            print('Введите адрес школы:')
            school_address = get_general_input.get_input_text()
            school = School(school_name, school_address)
            self.safe(school)
            print(f'Школа "{school.name}" создана! Адрес школы: {school.address}')            
            
        data = file_provider.get(self.file_name)
        school = jsonpickle.decode(data)
        return school
    
    def change_name(self):
        print('Введите новое название школы:')
        school = self.get_all()
        new_name = get_general_input.get_input_text()
        school.name = new_name
        self.safe(school)
        print(f'Название изменено! Новое название школы: {school.name}')
        
    def change_address(self):
        school = self.get_all()
        print('Введите новый адрес школы:')
        new_address = get_general_input.get_input_text()
        school.address = new_address
        self.safe(school)
        print(f'Адрес изменен! Новый адрес школы: {school.address}')

class Student():
    def __init__(self, name='Неизвестно', age='Неизвестно', number_class='Неизвестно'):
        self.name = name
        self.age = age
        self.number_class = number_class
        
class StudentStorage():
    def __init__(self):
        self.file_name = 'students.json'

    def get_all(self):
        if not file_provider.exist(self.file_name):
            students = []
            self.safe(students)

        data = file_provider.get(self.file_name)
        students = jsonpickle.decode(data)
        return students
    
    def safe(self, students):
        json_data = jsonpickle.encode(students)
        file_provider.writelines(self.file_name, json_data)

    def print_all(self, students):
        if not self.check_empty_list():
            number = 'Номер ученика'
            name = 'ФИО ученика'
            age = 'Возраст'
            number_class = 'Номер класса'
            print(f'{number:13} {name:30}{age:8}{number_class:12}')
            
            students = self.get_all()
            
            for student in students:
                print(f'{students.index(student)+1:13} {student.name:30}{student.age:8}{student.number_class:12}\n')

    def add(self):
        while True:
            print('Введите Имя ученика:')
            name = self.get_name()
            print('Введите Фамилию ученика:')
            surname = self.get_name()
            print('Введите Отчество ученика:')
            patronymic = self.get_name()
            name = f'{surname} {name} {patronymic}'
            
            print('Введите возраст ученика:')
            age = get_general_input.get_integer()
            
            print('Введите номер класса ученика:')
            number_class = get_general_input.get_integer()
            
            student = Student(name, age, number_class)
            students.append(student)
            self.safe(students)
            
            if get_general_input.ask_question('Хотите добавить еще одного ученика в список?'):
                continue
            else:
                break

    def remove(self):
        while True:
            if self.check_empty_list():
                break
            
            self.print_all(students)
            print('Введите номер ученика, которого надо удалить:')
            index = self.get_index_remove()
    
            students.pop(index - 1)
            self.safe(students)
            print(f'Ученик под номером {index} успешно удален!')
            
            if self.check_empty_list():
                break

            if get_general_input.ask_question('Хотите удалить еще одного ученика из списка?'):
                continue
            else:
                break
            
    def get_name(self):
        while True:
            user_name = input()
            user_name = user_name.replace(" ", "")
            if user_name == '':
                print(f'Введена пустая строка! Попробуйте снова.')
                continue
            if user_name.islower() or not user_name[0].isupper() or user_name.isupper():
                print(f'Введите слово, первая буква которого является заглавной')
                continue
            else:
                break
        return user_name

    def get_index_remove(self):
        index_remove = input()
        while not index_remove.isdigit() or int(index_remove) < 1 or int(index_remove) > len(students):
            print(f'Такого номера не существует! Введите число от 1 до {len(students)}')
            index_remove = input()
        return int(index_remove)

    def check_empty_list(self):
        if len(students) == 0:
            print('Список студентов пуст!')
            return True

class MenuStorage():
    def get_menu(self):
        menu = [
            'Получение полной информации о школе',
            'Изменение информации о школе',
            'Просмотр учеников школы в виде таблицы',
            'Добавление нового ученика школы',
            'Удаление имеющегося ученика школы']

        return menu

    def print_menu(self, menu):
        print('Меню:')
        print('---------------------------------------')
        for i in range(len(menu)):
                    print(f'{i+1}.{menu[i]}')
        print('---------------------------------------')

    def get_item(self):
        menu_item = input()
        while not menu_item.isdigit() or int(menu_item) < 1 or int(menu_item) > len(menu):
            print(f'Введите число от 1 до {len(menu)}!')
            menu_item = input()
        return int(menu_item)
    
class GetGeneralInput():
    def ask_question(self, question):
        print(question, 'Введите Да или Нет.')
        answer = input().lower()
        while answer != 'да' and answer != 'нет':
            print('Ответ некорректный! Возможные варианты ввода: Да или Нет')
            answer = input().lower()
        if answer == 'да':
            return True
        else:
            return False
    
    def get_integer(self):
        user_answer = input()
        while not user_answer.isdigit() or int(user_answer) < 0 or int(user_answer) > 100:
            print(f'Введите целое число!')
            user_answer = input()
        return int(user_answer)
    
    def get_input_text(self):
        user_answer = input()
        user_answer = user_answer.replace(" ", "")
        while user_answer == '':
            print(f'Введена пустая строка! Попробуйте снова.')
            user_answer = input()
            user_answer = user_answer.replace(" ", "")
        return user_answer

file_provider = FileProvider()
get_general_input = GetGeneralInput()
menu_storage = MenuStorage()
menu = menu_storage.get_menu()
schoolStorage = SchoolStorage()
school = schoolStorage.get_all()

student_storage = StudentStorage()
students = student_storage.get_all()

print(f'Добро пожаловать в школу "{school.name}"')
while True:
    menu_storage.print_menu(menu)
    print('Введите номер пункта меню, который хотите выбрать:')
    selected_menu_item = menu_storage.get_item()

    if selected_menu_item == 1:
        school = schoolStorage.get_all()
        print(f'Название школы: {school.name}')
        print(f'Адрес школы: {school.address}')
        print(f'Кол-во учеников школы: {school.count_students}')
        if get_general_input.ask_question('Хотите вернуться в меню?'):
            continue
        else:
            break

    if selected_menu_item == 2:
        if get_general_input.ask_question('Хотите изменить название школы?'):
            schoolStorage.change_name()
        if get_general_input.ask_question('Хотите изменить адрес школы?'):
                schoolStorage.change_address()
        if get_general_input.ask_question('Хотите вернуться в меню?'):
            continue
        else:
            break        

    if selected_menu_item == 3:
        students = student_storage.get_all()
        student_storage.print_all(students)
        if get_general_input.ask_question('Хотите вернуться в меню?'):
            continue
        else:
            break        

    if selected_menu_item == 4:
        student_storage.add()
        if get_general_input.ask_question('Хотите вернуться в меню?'):
            continue
        else:
            break        
        
    if selected_menu_item == 5:
        student_storage.remove()
        if get_general_input.ask_question('Хотите вернуться в меню?'):
            continue
        else:
            break        
