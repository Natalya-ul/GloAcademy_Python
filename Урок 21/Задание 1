import random
import os

class FileProvider:
    def get(self, path):
        file = open(path, 'r')
        data = file.read()
        file.close()
        return data
    
    def append(self, path, data):
        file = open(path, 'a')
        data = file.write(data)
        file.close()
        
    def exist(self, path):
        return os.path.exists(path)
    
        
class Question:
    def __init__(self, text, answer):
        self.text = text
        self.answer = answer

class QuestionsStorage:
    
    def base(self):
        questions = [
            Question('Сколько будет два плюс два, умноженное на 2?', 6),
            Question('Бревно надо распилить на 10 частей. Сколько надо сделать распилов?', 9),
            Question('На двух руках 10 пальцев. Сколько пальцев на 5 руках?', 25),
            Question('Укол делают каждые пол часа. Сколько нужно минут для трех уколов?', 60),
            Question('Пять свечей горело, две потухло. Сколько свечей осталось?', 2)
        ]
        
        file_name = 'questions.txt'
        file_provider = FileProvider()
        if not file_provider.exist(file_name):
            for question in questions:
                data = (f'{question.text}#{question.answer}\n')
                file_provider.append(file_name, data)
                
        return questions
    
    def append(self, question, answer):
        new_object = Question(question, answer)
        
        file_name = 'questions.txt'
        data = (f'{new_object.text}#{new_object.answer}\n')
        file_provider = FileProvider()
        file_provider.append(file_name, data)
    
    def read_all(self):
        file_name = 'questions.txt'
        file_provider = FileProvider()
        data = file_provider.get(file_name).strip('\n')
        data = data.split('\n')
        questions = []
        for line in data:
            values = line.split('#')
            question = Question(values[0], values[1])
            questions.append(question)
        return questions          
        
class User:
    def __init__(self, name, count_right_answers=0, result='Неизвестно'):
        self.name = name
        self.count_right_answers = count_right_answers
        self.result = result
        
    def accept_right_answer(self):
        self.count_right_answers += 1
        
    def set_result(self, result):
        self.result = result
      
class UsersResultStorage:
    def safe(self, user):
        file_name = 'results.txt'
        data = f'{user.name}#{user.count_right_answers}#{user.result}\n'
        
        file_provider = FileProvider()
        file_provider.append(file_name, data)
        
    def get_all(self):
        file_name = 'results.txt'
        
        file_provider = FileProvider()
        data = file_provider.get(file_name).strip('\n')
        data = data.split('\n')
        users = []
        
        for line in data:
            values = line.split('#')
            user = User(values[0], values[1], values[2])
            users.append(user)
        return users
    
def calculate_result(count_right_answers, count_questions):
    results = ['Идиот', 'Кретин', 'Дурак', 'Нормальный', 'Талант', 'Гений']
    right_answer_percent = count_right_answers * 100 // count_questions
    return results[right_answer_percent // 20]

def show_user_results():
        name = 'Имя'
        count_right_answers = 'Кол-во правильных ответов'
        result = 'Результат'
        print(f'{name:15}{count_right_answers:26}{result:15}')
        
        users = usersResultStorage.get_all()
        
        for user in users:
            print(f'{user.name:15}{user.count_right_answers:26}{user.result:15}\n')

def ask_question(question):
    print(question, 'Введите Да или Нет.')
    answer = input().lower()
    while answer != 'да' and answer != 'нет':
        print('Ответ некорректный! Возможные варианты ввода: Да или Нет')
        answer = input().lower()
    if answer == 'да':
        return True
    else:
        return False

def get_user_answer():
    user_answer = input()
    while not user_answer.isdigit():
        print('Ошибка ввода. Ответ должен представлять собой целое число')
        user_answer = input()
    return int(user_answer)

def check_new_question():
    questions = questionsStorage.read_all()
    questions_text = []
    for i in range(len(questions)):
        questions_text.append(questions[i].text) 
        
    while True:
        new_question = input()
        if new_question in questions_text:
            print('Такой вопрос уже существует, введите новый вопрос.')
            continue
        elif len(new_question) <= 20: 
            print('Очень маленькое кол-во символов.')
            continue
        else:
            break
        return new_question
    
questionsStorage = QuestionsStorage()
questionsStorage.base()
usersResultStorage = UsersResultStorage()


while True:
    if ask_question('Хотите добавить вопрос?'):
        print('Введите текст вопроса:')
        new_question = check_new_question()
        
        print('Введите ответ:')
        new_answer = get_user_answer()
        
        questionsStorage.append(new_question, new_answer)
    else:
        break
    
questions = questionsStorage.read_all()

while True:
    count_questions = len(questions)

    print('Введите ваше имя:')
    user_name = input()
    user = User(user_name)

    for i in range(len(questions)):
        random_index = random.randint(0, len(questions) - 1)

        print(f'Вопрос №{i + 1}. {questions[random_index].text}')
        user_answer = get_user_answer()
        
        right_answer = questions[random_index].answer
        if user_answer == right_answer:
            user.accept_right_answer()
            
        questions.pop(random_index)

    result = calculate_result(user.count_right_answers, count_questions)
    user.set_result(result)
    print(f'{user.name}, количество ваших правильных ответов - {user.count_right_answers}. Ваш диагноз: {user.result}.')
    
    usersResultStorage.safe(user)

    if not ask_question('Хотите начать тест заново?'):       
        break
    
if ask_question('Хотите вывести результаты?'):
    show_user_results()
