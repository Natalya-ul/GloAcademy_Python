import random
import os

import jsonpickle

import sqlite3


class FileProvider:
    def get(self, path):
        file = open(path, 'r')
        data = file.read()
        file.close()
        return data
    
    def append(self, path, data):
        file = open(path, 'a')
        data = file.write(data)
        file.close()
        
    def writelines(self, path, data):
        file = open(path, 'w')
        data = file.writelines(data)
        file.close()        
        
    def clear(self, path):
        file = open(path, 'w')
        data = file.write('')
        file.close()        
        
    def exist(self, path):
        return os.path.exists(path)
    
class Question:
    def __init__(self, text, answer):
        self.text = text
        self.answer = int(answer)

class QuestionsStorage:
    def __init__(self, connection):
        self.connection = connection
        
        cursor = connection.cursor()
        
        cursor.execute(''' SELECT count(name) FROM sqlite_master WHERE type='table' AND name='questions' ''')
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""CREATE TABLE questions(
            Text TEXT PRIMARY KEY,
            Answer INTEGER);""")
            connection.commit()

            questions = [
                Question('Сколько будет два плюс два, умноженное на 2?', 6),
                Question('Бревно надо распилить на 10 частей. Сколько надо сделать распилов?', 9),
                Question('На двух руках 10 пальцев. Сколько пальцев на 5 руках?', 25),
                Question('Укол делают каждые пол часа. Сколько нужно минут для трех уколов?', 60),
                Question('Пять свечей горело, две потухло. Сколько свечей осталось?', 2)]
            self.safe_questions(questions)
    
    def get_all(self):
        cursor = self.connection.cursor()
        
        cursor.execute("SELECT * FROM questions;")
        all_results = cursor.fetchall()
        questions = []

        for result in all_results:
            question = Question(result[0], result[1])
            questions.append(question)
            
        return questions

    def safe_questions(self, questions):
        for question in questions:
            self.add(question)

    def add(self, question):
        query = f"""INSERT INTO questions (Text,Answer) VALUES('{question.text}','{question.answer}');"""

        cursor = self.connection.cursor()
        cursor.execute(query)
        self.connection.commit()

    def remove(self, index):
        questions = self.get_all()
        question_for_delete = questions.pop(index)
        
        query = f"""DELETE FROM questions WHERE Text = '{question_for_delete.text}';"""
        
        cursor = self.connection.cursor()
        cursor.execute(query)
        self.connection.commit()

class User:
    def __init__(self, name, count_right_answers=0, result='Неизвестно'):
        self.name = name
        self.count_right_answers = count_right_answers
        self.result = result
        
    def accept_right_answer(self):
        self.count_right_answers += 1
        
    def set_result(self, result):
        self.result = result
      
class UsersResultStorage:
    def __init__(self, connection):
        self.connection = connection
        
        cursor = connection.cursor()
        
        cursor.execute(''' SELECT count(name) FROM sqlite_master WHERE type='table' AND name='results' ''')
        
        if cursor.fetchone()[0] == 0:
            cursor.execute("""CREATE TABLE results(
            Name TEXT PRIMARY KEY,
            Count_right_answers INTEGER,
            Result INTEGER);""")
            connection.commit()

            users = []
            self.safe(users)
    
    def safe(self, users):
        for user in users:
            self.add(user)

    def get_all(self):
        cursor = self.connection.cursor()
        
        cursor.execute("SELECT * FROM results;")
        all_results = cursor.fetchall()
        users = []

        for result in all_results:
            user = User(result[0], result[1], result[2])
            users.append(user)

        return users

    def add(self, user):
        query = f"""INSERT INTO results (Name,Count_right_answers,Result) VALUES('{user.name}','{user.count_right_answers}','{user.result}');"""

        cursor = self.connection.cursor()
        cursor.execute(query)
        self.connection.commit()        

def calculate_result(count_right_answers, count_questions):
    results = ['Идиот', 'Кретин', 'Дурак', 'Нормальный', 'Талант', 'Гений']
    right_answer_percent = count_right_answers * 100 // count_questions
    return results[right_answer_percent // 20]

def get_user_answer():
    user_answer = input()
    while not user_answer.isdigit():
        print('Введите целое число!')
        user_answer = input()
    return int(user_answer)

def show_user_results():
        name = 'Имя'
        count_right_answers = 'Кол-во правильных ответов'
        result = 'Результат'
        print(f'{name:15}{count_right_answers:30}{result:15}')
        
        users = usersResultStorage.get_all()
        
        for user in users:
            print(f'{user.name:15}{user.count_right_answers:30}{user.result:15}\n')

def ask_question(question):
    print(question, 'Введите Да или Нет.')
    answer = input().lower()
    while answer != 'да' and answer != 'нет':
        print('Ответ некорректный! Возможные варианты ввода: Да или Нет')
        answer = input().lower()
    if answer == 'да':
        return True
    else:
        return False

def add_new_question():
    print('Введите текст вопроса:')
    text = input()
    print('Введите ответ на вопрос:')
    answer = get_user_answer()
    new_question = Question(text, answer)
    questionsStorage.add(new_question)

def print_questions(questions):
    print('---------------------------------------')
    for i in range(len(questions)):
        print(f'{i+1}.{questions[i].text}')

    print('---------------------------------------')

def remove_question():
    questions = questionsStorage.get_all()
    while True:
        print('Укажите номер вопроса, который надо удалить')
        print_questions(questions)

        user_answer = get_user_answer()
        if user_answer < 1 or user_answer > len(questions):
            continue

        questionsStorage.remove(user_answer - 1)
        print(f'Ура! Вопрос под номером {user_answer} успешно удален')
        break

connection = sqlite3.connect('MyTester.db')

file_provider = FileProvider()
questionsStorage = QuestionsStorage(connection)
usersResultStorage = UsersResultStorage(connection)

# генерация человекочитаемого json
jsonpickle.set_encoder_options('json', indent=4, separators=(',', ': '),
                               ensure_ascii=False)
while True:
    users = usersResultStorage.get_all()
    questions = questionsStorage.get_all()
    count_questions = len(questions)

    print('Здравствуйте! Как вас зовут?')
    user_name = input()
    user = User(user_name)

    for i in range(len(questions)):
        random_index = random.randint(0, len(questions) - 1)

        print(f'Вопрос №{i + 1}. {questions[random_index].text}')
        user_answer = get_user_answer()
        
        right_answer = questions[random_index].answer
        if user_answer == right_answer:
            user.accept_right_answer()
            
        questions.pop(random_index)

    result = calculate_result(user.count_right_answers, count_questions)
    user.set_result(result)
    print(f'{user.name}, количество ваших правильных ответов - {user.count_right_answers}. Ваш диагноз: {user.result}.')
    
    usersResultStorage.add(user)

    if ask_question('Хотите посмотреть результаты предыдущих игр?'):
        show_user_results()

    if ask_question('Хотите добавить новый вопрос?'):
        add_new_question()

    if ask_question('Хотите удалить вопрос?'):
        remove_question()

    if not ask_question('Хотите начать тест заново?'):
        break
